// Genericamente, uma equa√ß√£o do segundo grau √© representada da seguinte
// forma: ùëéùë•¬≤ + ùëèùë• + ùëê = 0. Uma equa√ß√£o do segundo grau pode possuir at√©
// duas solu√ß√µes, chamadas de ra√≠zes ou zeros da equa√ß√£o. Dado o valor ùõ• =
// (ùëè¬≤ ‚àí 4ùëéùëê), as ra√≠zes s√£o: (ùë•1// ‚àíùëè+‚àöùõ•/ 2ùëé) e (ùë•2// ‚àíùëè‚àí‚àöùõ•/ 2ùëé).
// Fa√ßa um programa que receba os valores para ùëé, ùëè e ùëê, associados aos
// coeficientes da equa√ß√£o do segundo grau, e retorne as correspondentes
// ra√≠zes.
// Observa√ß√µes: para garantir a exist√™ncia de uma equa√ß√£o do segundo
// grau, ùëé ‚â† 0; para garantir a exist√™ncia de ra√≠zes reais, ùõ• ‚â• 0; utilize
// Math.sqrt() para retornar o valor da raiz quadrada de um n√∫mero. Exemplo
// de uso: num = Math.sqrt(4).
// No caso acima, o valor 2, raiz quadrada de 4, √© atribu√≠do √† vari√°vel num

    // DECLARA√á√ÉO DE VARI√ÅVEIS
    var a, b, c, bNegativo, x1, x2, delta, raizDelta;

    // LEITURA DE DADOS
    a = parseFloat(prompt("Digite o valor de A"));
    b = parseFloat(prompt("Digite o valor de B"));
    c = parseFloat(prompt("Digite o valor de C"));

    // PROCESSAMENTO DO DADOS IMPORTANTES PARA DENTRO DE OUTRAS VARI√ÅVEIS
    bNegativo = b*(-1);
    delta = (b*b) - (4*a*c);
    raizDelta = Math.sqrt(delta);

    // O PR√ìXIMO "IF" CONFERE, A PARTIR DE "A", SE TEMOS UMA EQUA√á√ÉO DO SEGUNDO GRAU
    if (a != 0) {
        // ENTRA AQUI SE FOR EQUA√á√ÉO DO SEGUNDO GRAU
        if (delta >= 0) {
            // ENTRA AQUI SE HOUVEREM RA√çZES REAIS
            x1 = (bNegativo + raizDelta)/(2*a);
            x2 = (bNegativo - raizDelta)/(2*a);
            document.write("As ra√≠zes dessa equa√ß√£o s√£o " + x1 + " e " + x2 + ".");
        }/* CASO N√ÉO */ else {
            document.write("N√£o √© poss√≠vel obter ra√≠zes reais.")
        }
    } /*SE O VALOR DE "a" FOR ZERO*/ else {
        document.write("N√£o √© uma equa√ß√£o do segundo grau.")
    }